Install postgres server

sudo dnf install postgresql-server postgresql-contrib
sudo systemctl start postgresql
sudo systemctl enable postgresql

Check status
sudo systemctl status postgresql

Allow connection:

sudo nano /var/lib/pgsql/data/postgresql.conf
#listen_addresses = 'localhost'
#listen_addresses = '*'
sudo nano /var/lib/pgsql/data/pg_hba.conf
host    all             all             192.168.0.0/24           md5

sudo systemctl restart postgresql

Set password:

sudo -i -u postgres
psql
\password postgres
\q

Allow on firewall:

sudo firewall-cmd --permanent --add-port=5432/tcp
sudo firewall-cmd --reload

Connect:

On **pgAdmin, create a new server:

- **Name**: Fedora Postgres
    
- **Host**: 192.168.0.140
    
- **Port**: 5432
    
- **Username**: postgres
    
- **Password**: (password)
    
- **Maintenance DB**: postgres
    

  

To run the sync script

pip install psycopg2-binary
pip3 install psycopg2-binary

Script:

`import sqlite3`
`import psycopg2`

`SQLITE_DB_PATH = "/home/Lazarov/coffeetime/piholev6/etc-pihole/pihole-FTL.db"`

`PG_CONN = {`
    `"host": "192.168.0.140",`
    `"port": 5432,`
    `"database": "pihole",`
    `"user": "postgres",`
    `"password": "password"`
`}`

`TABLE_MAPPINGS = {`
    `"client": "client_by_id(id, ip, name)",`
    `"domain": "domain_by_id(id, domain)",`
    `"network": "network(id, hwaddr, interface, firstSeen, lastQuery, numQueries, macVendor, aliasclient_id)",`
    `"network_addresses": "network_addresses(network_id, ip, last_seen, name, name_updated)",`
    `"query_storage": "query_storage(id, timestamp, type, status, domain, client, forward, additional_info, reply_type, reply_time, dnssec, list_id, ede)"`
`}`

`def copy_table(sqlite_conn, pg_conn, source_table, dest_table_def):`
    `dest_table = dest_table_def.split("(")[0]`
    `columns = dest_table_def.split("(", 1)[1].rstrip(")")`
    `placeholders = ", ".join(["%s"] * len(columns.split(",")))`

    `print(f"Syncing {source_table} → {dest_table}...")`

    `sqlite_cur = sqlite_conn.cursor()`
    `pg_cur = pg_conn.cursor()`

    `sqlite_cur.execute(f"SELECT {columns} FROM {source_table}")`
    `rows = sqlite_cur.fetchall()`

    `pg_cur.execute(f"TRUNCATE {dest_table} RESTART IDENTITY CASCADE")`
    `pg_cur.executemany(`
        `f"INSERT INTO {dest_table} ({columns}) VALUES ({placeholders})", rows`
    `)`
    `pg_conn.commit()`
    `print(f"Inserted {len(rows)} rows into {dest_table}.")`

`def main():`
    `print("Connecting to SQLite...")`
    `sqlite_conn = sqlite3.connect(SQLITE_DB_PATH)`

    `print("Connecting to PostgreSQL...")`
    `pg_conn = psycopg2.connect(**PG_CONN)`

    `try:`
        `for sqlite_table, pg_table_def in TABLE_MAPPINGS.items():`
            `copy_table(sqlite_conn, pg_conn, sqlite_table, pg_table_def)`

    `finally:`
        `sqlite_conn.close()`
        `pg_conn.close()`
        `print("All done!")`

`if __name__ == "__main__":`
    `main()`
